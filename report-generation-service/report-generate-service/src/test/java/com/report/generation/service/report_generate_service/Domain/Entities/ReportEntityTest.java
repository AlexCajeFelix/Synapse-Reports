package com.report.generation.service.report_generate_service.Domain.Entities;

import com.report.generation.service.report_generate_service.Application.Enum.ReportStatus;
import com.report.generation.service.report_generate_service.Application.Enum.ReportType;
import com.report.generation.service.report_generate_service.Domain.Exceptions.CustomException.ReportException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

public class ReportEntityTest {

    private Report report;

    @BeforeEach
    void setup_valid_report_entity() {
        // Given
        UUID initialId = UUID.randomUUID();
        ReportType initialReportType = ReportType.CSV;
        ReportStatus initialStatus = ReportStatus.PENDING;
        LocalDate initialStartDate = LocalDate.of(2023, 1, 1);
        LocalDate initialEndDate = LocalDate.of(2023, 1, 31);
        LocalDateTime initialRequestedAt = LocalDateTime.now().minusHours(1);
        String initialParameters = "region=South";
        String initialLinkDownload = null;

        // When
        report = new Report(initialId, initialReportType, initialStatus, initialStartDate,
                initialEndDate, initialRequestedAt, initialParameters, initialLinkDownload);

        // Then (Implicitly, a valid report is set up for further tests)
        assertNotNull(report);
    }

    // --- Testes de Construtores ---

    @Test
    @DisplayName("should_create_report_with_default_constructor")
    void should_create_report_with_default_constructor() {
        // Given (nothing specific to arrange, testing default state)

        // When
        Report defaultReport = new Report();

        // Then
        assertNotNull(defaultReport);
        assertNull(defaultReport.getId());
        assertNull(defaultReport.getReportType());
        assertNull(defaultReport.getStatus());
        assertNull(defaultReport.getReportStartDate());
        assertNull(defaultReport.getReportEndDate());
        assertNull(defaultReport.getRequestedAt());
        assertNull(defaultReport.getParameters());
        assertNull(defaultReport.getLinkDownload());
    }

    @Test
    @DisplayName("should_create_report_with_all_args_constructor")
    void should_create_report_with_all_args_constructor() {
        // Given
        UUID testId = UUID.randomUUID();
        ReportType testReportType = ReportType.PDF;
        ReportStatus testStatus = ReportStatus.COMPLETED;
        LocalDate testStartDate = LocalDate.of(2024, 1, 1);
        LocalDate testEndDate = LocalDate.of(2024, 1, 31);
        LocalDateTime testRequestedAt = LocalDateTime.now();
        String testParameters = "item=laptop";
        String testLinkDownload = "http://download.com/report123";

        // When
        Report allArgsConstructorReport = new Report(testId, testReportType, testStatus, testStartDate,
                testEndDate, testRequestedAt, testParameters, testLinkDownload);

        // Then
        assertEquals(testId, allArgsConstructorReport.getId());
        assertEquals(testReportType, allArgsConstructorReport.getReportType());
        assertEquals(testStatus, allArgsConstructorReport.getStatus());
        assertEquals(testStartDate, allArgsConstructorReport.getReportStartDate());
        assertEquals(testEndDate, allArgsConstructorReport.getReportEndDate());
        assertEquals(testRequestedAt, allArgsConstructorReport.getRequestedAt());
        assertEquals(testParameters, allArgsConstructorReport.getParameters());
        assertEquals(testLinkDownload, allArgsConstructorReport.getLinkDownload());
    }

    @Test
    @DisplayName("should_create_report_with_partial_constructor_and_set_defaults")
    void should_create_report_with_partial_constructor_and_set_defaults() {
        // Given
        ReportType newReportType = ReportType.CSV;
        LocalDate newStartDate = LocalDate.of(2024, 6, 1);
        LocalDate newEndDate = LocalDate.of(2024, 6, 15);
        String newParameters = "user=admin";

        // When
        Report partialConstructorReport = new Report(newReportType, newStartDate, newEndDate, newParameters);

        // Then
        assertNull(partialConstructorReport.getId()); // ID is generated by JPA
        assertEquals(newReportType, partialConstructorReport.getReportType());
        assertEquals(newStartDate, partialConstructorReport.getReportStartDate());
        assertEquals(newEndDate, partialConstructorReport.getReportEndDate());
        assertEquals(newParameters, partialConstructorReport.getParameters());
        assertEquals(ReportStatus.PENDING, partialConstructorReport.getStatus());
        // Verify requestedAt is set and within a reasonable timeframe (e.g., within 1
        // second of now)
        assertNotNull(partialConstructorReport.getRequestedAt());
        assertTrue(partialConstructorReport.getRequestedAt().isBefore(LocalDateTime.now().plusSeconds(1))
                && partialConstructorReport.getRequestedAt().isAfter(LocalDateTime.now().minusSeconds(1)));
        assertNull(partialConstructorReport.getLinkDownload());
    }

    // --- Testes de Getters e Setters (via Lombok) ---

    @Test
    @DisplayName("should_set_and_get_id")
    void should_set_and_get_id() {
        // Given
        UUID newId = UUID.randomUUID();

        // When
        report.setId(newId);

        // Then
        assertEquals(newId, report.getId());
    }

    @Test
    @DisplayName("should_set_and_get_report_type")
    void should_set_and_get_report_type() {
        // Given
        ReportType newType = ReportType.CSV;

        // When
        report.setReportType(newType);

        // Then
        assertEquals(newType, report.getReportType());
    }

    @Test
    @DisplayName("should_set_and_get_status")
    void should_set_and_get_status() {
        // Given
        ReportStatus newStatus = ReportStatus.FAILED;

        // When
        report.setStatus(newStatus);

        // Then
        assertEquals(newStatus, report.getStatus());
    }

    @Test
    @DisplayName("should_set_and_get_report_start_date")
    void should_set_and_get_report_start_date() {
        // Given
        LocalDate newStartDate = LocalDate.of(2022, 5, 1);

        // When
        report.setReportStartDate(newStartDate);

        // Then
        assertEquals(newStartDate, report.getReportStartDate());
    }

    @Test
    @DisplayName("should_set_and_get_report_end_date")
    void should_set_and_get_report_end_date() {
        // Given
        LocalDate newEndDate = LocalDate.of(2022, 5, 31);

        // When
        report.setReportEndDate(newEndDate);

        // Then
        assertEquals(newEndDate, report.getReportEndDate());
    }

    @Test
    @DisplayName("should_set_and_get_requested_at")
    void should_set_and_get_requested_at() {
        // Given
        LocalDateTime newRequestedAt = LocalDateTime.now().plusDays(1); // Could be any datetime

        // When
        report.setRequestedAt(newRequestedAt);

        // Then
        assertEquals(newRequestedAt, report.getRequestedAt());
    }

    @Test
    @DisplayName("should_set_and_get_parameters")
    void should_set_and_get_parameters() {
        // Given
        String newParameters = "category=electronics";

        // When
        report.setParameters(newParameters);

        // Then
        assertEquals(newParameters, report.getParameters());
    }

    @Test
    @DisplayName("should_set_and_get_link_download")
    void should_set_and_get_link_download() {
        // Given
        String newLink = "http://newdownload.com/reportABC";

        // When
        report.setLinkDownload(newLink);

        // Then
        assertEquals(newLink, report.getLinkDownload());
    }

    // --- Testes de Métodos de Atualização (updateX) ---

    @Test
    @DisplayName("should_update_status")
    void should_update_status() {
        // Given
        ReportStatus initialStatus = report.getStatus();
        ReportStatus newStatus = ReportStatus.COMPLETED;

        // When
        report.updateStatus(newStatus);

        // Then
        assertNotEquals(initialStatus, report.getStatus());
        assertEquals(newStatus, report.getStatus());
    }

    @Test
    @DisplayName("should_update_link_download")
    void should_update_link_download() {
        // Given
        String newLink = "http://finalreport.com/download.pdf";

        // When
        report.updateLinkDownload(newLink);

        // Then
        assertEquals(newLink, report.getLinkDownload());
    }

    @Test
    @DisplayName("should_update_report_end_date")
    void should_update_report_end_date() {
        // Given
        LocalDate newEndDate = LocalDate.of(2024, 12, 31);

        // When
        report.updateReportEndDate(newEndDate);

        // Then
        assertEquals(newEndDate, report.getReportEndDate());
    }

    @Test
    @DisplayName("should_update_report_start_date")
    void should_update_report_start_date() {
        // Given
        LocalDate newStartDate = LocalDate.of(2024, 1, 1);

        // When
        report.updateReportStartDate(newStartDate);

        // Then
        assertEquals(newStartDate, report.getReportStartDate());
    }

    @Test
    @DisplayName("should_update_report_type")
    void should_update_report_type() {
        // Given
        ReportType newReportType = ReportType.PDF;

        // When
        report.updateReportType(newReportType);

        // Then
        assertEquals(newReportType, report.getReportType());
    }

    @Test
    @DisplayName("should_update_parameters")
    void should_update_parameters() {
        // Given
        String updatedParams = "level=high&status=active";

        // When
        report.updateParameters(updatedParams);

        // Then
        assertEquals(updatedParams, report.getParameters());
    }

    @Test
    @DisplayName("should_update_requested_at")
    void should_update_requested_at() {
        // Given
        LocalDateTime updatedRequestedAt = LocalDateTime.of(2024, 1, 1, 10, 0);

        // When
        report.updateRequestedAt(updatedRequestedAt);

        // Then
        assertEquals(updatedRequestedAt, report.getRequestedAt());
    }

    @Test
    @DisplayName("should_update_id")
    void should_update_id() {
        // Given
        UUID updatedId = UUID.randomUUID();

        // When
        report.updateId(updatedId);

        // Then
        assertEquals(updatedId, report.getId());
    }

    // --- Testes de Validação (validationSelf) ---

    @Test
    @DisplayName("should_pass_validation_when_report_is_valid")
    void should_pass_validation_when_report_is_valid() {
        // Given (report is initialized as valid in @BeforeEach)

        // When & Then
        // No exception should be thrown for a valid entity
        assertDoesNotThrow(() -> report.validationSelf());
    }

    @Test
    @DisplayName("should_throw_exception_when_report_type_is_null")
    void should_throw_exception_when_report_type_is_null() {
        // Given
        report.setReportType(null);

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Report type cannot be null."));
    }

    @Test
    @DisplayName("should_throw_exception_when_report_start_date_is_null")
    void should_throw_exception_when_report_start_date_is_null() {
        // Given
        report.setReportStartDate(null);

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Report start date cannot be null."));
    }

    @Test
    @DisplayName("should_throw_exception_when_report_end_date_is_null")
    void should_throw_exception_when_report_end_date_is_null() {
        // Given
        report.setReportEndDate(null);

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Report end date cannot be null."));
    }

    @Test
    @DisplayName("should_throw_exception_when_start_date_is_after_end_date")
    void should_throw_exception_when_start_date_is_after_end_date() {
        // Given
        report.setReportStartDate(LocalDate.of(2024, 1, 31));
        report.setReportEndDate(LocalDate.of(2024, 1, 1));

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Report start date cannot be after report end date."));
    }

    @Test
    @DisplayName("should_throw_exception_when_report_end_date_is_in_future")
    void should_throw_exception_when_report_end_date_is_in_future() {
        // Given
        report.setReportEndDate(LocalDate.now().plusDays(5)); // Set to a future date

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Report end date cannot be in the future."));
    }

    @Test
    @DisplayName("should_throw_exception_when_parameters_are_blank")
    void should_throw_exception_when_parameters_are_blank() {
        // Given
        report.setParameters("   ");

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Parameters cannot be an empty string if provided."));
    }

    @Test
    @DisplayName("should_pass_validation_when_parameters_are_null")
    void should_pass_validation_when_parameters_are_null() {
        // Given
        report.setParameters(null); // Null is allowed based on your validation rules

        // When & Then
        assertDoesNotThrow(() -> report.validationSelf());
    }

    @Test
    @DisplayName("should_throw_exception_when_parameters_are_empty_string")
    void should_throw_exception_when_parameters_are_empty_string() {
        // Given
        report.setParameters("");

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        assertTrue(exception.getMessage().contains("Parameters cannot be an empty string if provided."));
    }

    @Test
    @DisplayName("should_throw_exception_with_multiple_error_messages_for_invalid_fields")
    void should_throw_exception_with_multiple_error_messages_for_invalid_fields() {
        // Given
        report.setReportType(null);
        report.setReportStartDate(LocalDate.of(2025, 1, 1)); // Future date
        report.setReportEndDate(LocalDate.of(2024, 12, 31)); // Earlier than start
        report.setParameters("   ");

        // When
        ReportException exception = assertThrows(ReportException.class,
                () -> report.validationSelf());

        // Then
        String errorMessage = exception.getMessage();
        assertTrue(errorMessage.contains("Report type cannot be null."));
    }

    // --- Testes do método toString() ---

}